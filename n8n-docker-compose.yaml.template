volumes:
  n8n_data:
    external: true

  n8n_redis_data: # Volume for Redis data
    external: true

  n8n_postgres_data:
    external: true

  n8n_modules: # Volume for npm modules
    external: true

  caddy_data:
    external: true

  caddy_config:
    external: true


services:
  n8n:
    build:
      context: ./n8n-custom
      dockerfile: Dockerfile
    container_name: n8n
    restart: unless-stopped
    # Environment variables for n8n
    environment:
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_DEFAULT_USER_EMAIL=${N8N_DEFAULT_USER_EMAIL}
      - N8N_DEFAULT_USER_PASSWORD=${N8N_DEFAULT_USER_PASSWORD}
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER
      - N8N_BASIC_AUTH_PASSWORD
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - EXECUTIONS_PROCESS=main
      - QUEUE_BULL_REDIS_HOST=n8n_redis
      - QUEUE_BULL_REDIS_PORT=6379
      - NODE_PATH=/usr/local/lib/node_modules
      - N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/custom_modules
    # To use Redis for queueing, uncomment the line above and ensure the Redis service is enabled.
    # All DB_* variables configure PostgreSQL as the backend.

    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_modules:/usr/local/lib/node_modules
      # - /some/host/path:/files # If you need to mount host files
    networks:
      - app-network
    depends_on:
      - postgres
      - n8n_redis # Ensure Redis starts before n8n

  adminer:
    image: adminer:latest # Official Adminer image
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080" # Internal port, Caddy will expose it on 443
    networks:
      - app-network
    depends_on:
      - postgres # Optional, but good practice

  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - /opt/Caddyfile:/etc/caddy/Caddyfile # Corrected path
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app-network

  postgres:
    image: ankane/pgvector:latest # Includes pgvector extension
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - n8n_postgres_data:/var/lib/postgresql/data # Corrected volume name
      - /opt/pgvector-init.sql:/docker-entrypoint-initdb.d/pgvector-init.sql:ro # Corrected path
    networks:
      - app-network

  n8n_redis:
    image: redis:alpine
    container_name: n8n_redis
    restart: unless-stopped
    volumes:
      - n8n_redis_data:/data
    networks:
      - app-network

networks:
  app-network:
    external: true