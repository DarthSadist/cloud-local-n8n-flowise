#!/bin/bash

echo "Starting services..."

# Check if Docker is running
if ! sudo docker info > /dev/null 2>&1; then
    echo "Error: Docker daemon is not running." >&2
    exit 1
fi

# Define compose file paths
N8N_COMPOSE_FILE="/opt/n8n-docker-compose.yaml"
FLOWISE_COMPOSE_FILE="/opt/flowise-docker-compose.yaml"
QDRANT_COMPOSE_FILE="/opt/qdrant-docker-compose.yaml"
CRAWL4AI_COMPOSE_FILE="/opt/crawl4ai-docker-compose.yaml"
WATCHTOWER_COMPOSE_FILE="/opt/watchtower-docker-compose.yaml"
NETDATA_COMPOSE_FILE="/opt/netdata-docker-compose.yaml"
ENV_FILE="/opt/.env" # Assuming .env is copied to /opt

# Check if compose files exist
if [ ! -f "$N8N_COMPOSE_FILE" ]; then
    echo "Error: $N8N_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$FLOWISE_COMPOSE_FILE" ]; then
    echo "Error: $FLOWISE_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$QDRANT_COMPOSE_FILE" ]; then
    echo "Error: $QDRANT_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$CRAWL4AI_COMPOSE_FILE" ]; then
    echo "Error: $CRAWL4AI_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$WATCHTOWER_COMPOSE_FILE" ]; then
    echo "Error: $WATCHTOWER_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$NETDATA_COMPOSE_FILE" ]; then
    echo "Error: $NETDATA_COMPOSE_FILE not found." >&2
    exit 1
fi
if [ ! -f "$ENV_FILE" ]; then
    echo "Error: $ENV_FILE not found." >&2
    exit 1
fi

echo "========================================================="
echo "  ‚öôÔ∏è –°—Ç–∞—Ä—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: n8n, Flowise, Qdrant, Adminer, Crawl4AI, Watchtower, Netdata, Caddy, PostgreSQL, Redis"
echo "=========================================================" 

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
start_service() {
  local compose_file=$1
  local service_name=$2
  local env_file=$3
  local max_retries=2
  local retry_count=0

  echo "\n======================"
  echo "‚ö° –ó–∞–ø—É—Å–∫ $service_name..."
  echo "======================\n"
  
  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  local start_cmd="sudo docker compose -f $compose_file"
  if [ -n "$env_file" ]; then
    start_cmd="$start_cmd --env-file $env_file"
  fi
  start_cmd="$start_cmd up -d"
  
  # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  while [ $retry_count -lt $max_retries ]; do
    echo "–ó–∞–ø—É—Å–∫ $service_name (–ø–æ–ø—ã—Ç–∫–∞ $((retry_count+1))/$max_retries)..."
    eval $start_cmd
    
    if [ $? -eq 0 ]; then
      local verify_cmd="sudo docker ps | grep -q \"$service_name\""
      sleep 3  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ–ª —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫
      if eval $verify_cmd; then
        echo "‚úÖ $service_name —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        return 0
      else
        echo "‚ö†Ô∏è $service_name –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
      fi
    fi

    retry_count=$((retry_count+1))
    if [ $retry_count -lt $max_retries ]; then
      echo "‚ö†Ô∏è –°–±–æ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ $service_name, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
      sleep 5
    else
      echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å $service_name –ø–æ—Å–ª–µ $max_retries –ø–æ–ø—ã—Ç–æ–∫!"
      return 1
    fi
  done
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
successful_services=0
failed_services=0
total_services=7  # n8n, flowise, qdrant, crawl4ai, watchtower, netdata, adminer

# –ó–∞–ø—É—Å–∫ n8n —Å—Ç–µ–∫–∞ (–≤–∫–ª—é—á–∞–µ—Ç Caddy, Postgres, Redis, Adminer)
start_service "$N8N_COMPOSE_FILE" "n8n" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ Docker
  echo "\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ Docker..."
  sleep 5
  if ! sudo docker network inspect app-network &> /dev/null; then
    echo "‚ùå –û—à–∏–±–∫–∞: –°–µ—Ç—å app-network –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
    exit 1
  else
    echo "‚úÖ –°–µ—Ç—å app-network —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
  fi
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å n8n —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Flowise —Å—Ç–µ–∫–∞
start_service "$FLOWISE_COMPOSE_FILE" "flowise" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Flowise —Å—Ç–µ–∫"
  exit 1
fi



# –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞

# –ó–∞–ø—É—Å–∫ Qdrant
start_service "$QDRANT_COMPOSE_FILE" "qdrant" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Qdrant —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Crawl4AI
start_service "$CRAWL4AI_COMPOSE_FILE" "crawl4ai" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Crawl4AI —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Watchtower
start_service "$WATCHTOWER_COMPOSE_FILE" "watchtower" ""
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Watchtower —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Netdata
start_service "$NETDATA_COMPOSE_FILE" "netdata" "$ENV_FILE"
if [ $? -eq 0 ]; then
  ((successful_services++))
else
  ((failed_services++))
  echo "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Netdata —Å—Ç–µ–∫"
  exit 1
fi

# –ó–∞–ø—É—Å–∫ Adminer (–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ n8n-docker-compose)
echo "\n======================="
echo "‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞/–∑–∞–ø—É—Å–∫ Adminer..."
echo "=======================\n"

if ! sudo docker ps | grep -q "adminer"; then
  echo "Adminer –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –∏–∑ n8n-docker-compose.yaml..."
  sudo docker compose -f "$N8N_COMPOSE_FILE" --env-file "$ENV_FILE" up -d adminer
  sleep 3
  if sudo docker ps | grep -q "adminer"; then
    echo "‚úÖ Adminer —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    ((successful_services++))
  else
    echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Adminer –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
    ((failed_services++))
  fi
else
  echo "‚úÖ Adminer —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
  ((successful_services++))
fi

# –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "\n\n=========================================="
echo "üïí –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
echo "==========================================\n"
sleep 8

# –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "\n\n=========================================="
echo "üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –°–ï–†–í–ò–°–û–í"
echo "==========================================\n"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service() {
  local service=$1
  if sudo docker ps | grep -q "$service"; then
    echo "‚úÖ $service - –ó–ê–ü–£–©–ï–ù"
    return 0
  else
    echo "‚ùå $service - –ù–ï –ó–ê–ü–£–©–ï–ù"
    return 1
  fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
check_service "n8n"
check_service "caddy"
check_service "flowise"
check_service "qdrant"
check_service "crawl4ai" 
check_service "watchtower"
check_service "netdata"
check_service "adminer" # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ Caddy —Å–ª—É—à–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã
echo "\n- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ Caddy:"
if ! sudo ss -tulnp | grep -q 'docker-proxy.*:80' || ! sudo ss -tulnp | grep -q 'docker-proxy.*:443'; then
    echo "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: Caddy (–æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏) –Ω–µ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç—ã 80 –∏–ª–∏ 443"
else
    echo "‚úÖ Caddy —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç—ã 80 –∏ 443"
fi

# –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
echo "\n========================================================="
echo "üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ü–£–°–ö–ê:"
echo "   ‚úì –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: $successful_services –∏–∑ $total_services —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "   ‚úó –ù–µ –∑–∞–ø—É—â–µ–Ω–æ: $failed_services —Å–µ—Ä–≤–∏—Å–æ–≤"
if [ $failed_services -eq 0 ]; then
  echo "\n‚úÖ –í–°–ï –°–ï–†–í–ò–°–´ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–´!"
  echo "========================================================="
  echo "–°–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã! –°–∫–æ—Ä–æ –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
else
  echo "\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."
  echo "========================================================="
  echo "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
fi

exit 0